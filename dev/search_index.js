var documenterSearchIndex = {"docs":
[{"location":"writing_scripts/#Write-a-script","page":"Write a script","title":"Write a script","text":"","category":"section"},{"location":"writing_scripts/","page":"Write a script","title":"Write a script","text":"Now that we have a project, let's play with some data. In this example we'll import the iris flower data set and do some basic data exploration.","category":"page"},{"location":"writing_scripts/#Add-packages-to-the-project","page":"Write a script","title":"Add packages to the project","text":"","category":"section"},{"location":"writing_scripts/","page":"Write a script","title":"Write a script","text":"For this example we'll need some existing functionality for data manipulation. In particular, we'll need to fetch the following packages from the Julia ecosystem:","category":"page"},{"location":"writing_scripts/","page":"Write a script","title":"Write a script","text":"CSV for reading and writing delimted (including CSV) files.\nDataFrames for manipulating tabular data in memory.\nStatistics for computing basic descriptive statistics such as means and variances.\nRDatasets, which fetches the iris data set for us.","category":"page"},{"location":"writing_scripts/","page":"Write a script","title":"Write a script","text":"To get these packages, open Julia and navigate to the project directory (type cd(\"C:\\\\Users\\\\username\\\\code\\\\MyFirstProject\")).","category":"page"},{"location":"writing_scripts/","page":"Write a script","title":"Write a script","text":"Then type the following. This may take a few minutes.","category":"page"},{"location":"writing_scripts/","page":"Write a script","title":"Write a script","text":"]  # Put the REPL into package mode. To get out of package mode, type Ctrl-C.\nadd CSV\nadd DataFrames\nadd Satistics\nadd RDatasets","category":"page"},{"location":"writing_scripts/","page":"Write a script","title":"Write a script","text":"Type st or status to see a list of packages that the project now depends on, also known as the project's dependencies, together with their versions. The list of dependencies can also be seen in the Project.toml file in the project directory. The full list of dependencies, including dependencies of dependencies and so on, can be seen in the project's Manifest.toml file. You'll never need to edit these files - they update automatically as the project is developed.","category":"page"},{"location":"writing_scripts/#Create-a-script","page":"Write a script","title":"Create a script","text":"","category":"section"},{"location":"writing_scripts/","page":"Write a script","title":"Write a script","text":"We'll write our data manipulations as a script containing a list of instructions, as follows.","category":"page"},{"location":"writing_scripts/","page":"Write a script","title":"Write a script","text":"First, create a scripts directory in the project folder, i.e., C:\\\\Users\\username\\code\\MyFirstProject\\scripts.\nIn the scripts directory, create a file called explore_iris_data.jl.\nPut the following code into the new file and save.","category":"page"},{"location":"writing_scripts/","page":"Write a script","title":"Write a script","text":"# Get started\nusing Pkg          # Import the Pkg package, which is in Julia's standard library.\nPkg.activate(\".\")  # Set the current directory as the active directory.\nPkg.instantiate()  # Fetch any dependencies that you don't already have (Julia uses Manifest.toml to do this)\n\n# Import required packages\nusing CSV         # For reading and writing delimted (including CSV) files.\nusing DataFrames  # For manipulating tabular data in memory.\nusing RDatasets   # Fetches the iris data set for us.\nusing Statistics  # For computing basic descriptive statistics such as means and variances.\n\n# Fetch data from the web\ndata = dataset(\"datasets\", \"iris\")   # Use the RDatasets package to fetch the iris data set\n\n# Exercise: Read/write data\noutfile = tempname()                 # Create a temporary file name\nCSV.write(outfile, data)             # Write the data to a CSV file located at the temporary file location\ndata = CSV.read(outfile, DataFrame)  # Read the data from the CSV file\n\n# Basic statistics\nsize(data)      # Number of rows and columns (nrow and ncol also work)\nnames(data)     # List the column names\nfirst(data, 5)  # Display the first 5 rows\nlast(data, 5)   # Display the last 5 rows\ndescribe(data)  # Basic counts and quantiles\nquantile(data.SepalLength, [0.05, 0.25, 0.5, 0.75, 0.95])  # More quantiles\n\n# View/subset where Species is \"setosa\"\nunique(data.Species)  # List the unique values of the Species column\nv = view(data, data.Species .== \"setosa\", :)  # Rows with Species equal to setosa\ndescribe(v)  # Basic counts and quantiles for this view\n\n# Basic statistics grouped by Species\nbySpecies = groupby(data, :Species)  # Splits data into 3 views, 1 for each value of Species\nbySpecies[1]  # Group 1: Species is setosa\nbySpecies[2]  # Group 2: Species is versicolor\nbySpecies[3]  # Group 3: Species is virginica\nsmry = combine(bySpecies, nrow, :SepalLength => mean, :SepalWidth => mean, :PetalLength => mean, :PetalWidth => mean)\n\n# Sorting\nsort!(data, \"Species\")  # Sort by 1 column\nsort!(data, [\"Species\", \"SepalLength\"])  # Sort by multiple columns","category":"page"},{"location":"writing_scripts/","page":"Write a script","title":"Write a script","text":"Try running the code above in the REPL, checking that the result of each line is as expected.\nTo run all lines in the file as a script:\nOpen PowerShell (or a terminal within VS Code)\nNavigate to the project directory by typing (modify the path as required):  cd C:\\\\Users\\username\\code\\MyFirstProject\nRun the script:  julia scripts\\explore_iris_data.jl","category":"page"},{"location":"testing/#Test-your-code","page":"Test your code","title":"Test your code","text":"","category":"section"},{"location":"testing/","page":"Test your code","title":"Test your code","text":"A unit test is a comparison of a computation's output to a required result. For example, if we have a function add(x, y) that adds 2 numbers, then we require that add(2, 3) returns 5.","category":"page"},{"location":"testing/","page":"Test your code","title":"Test your code","text":"A test suite is a set of unit tests that we use to check whether our code still functions as required. As our code base becomes larger and more complex, the risk of inadvertently changing the behaviour of existing functions rises. A test suite that covers all or most of our code gives us some reassurance that the code still behaves as required.","category":"page"},{"location":"testing/","page":"Test your code","title":"Test your code","text":"Julia packages contain their tests in the test folder in the package's root directory. The runtests.jl file is the starting point for a test suite. Here we construct a simple test suite:","category":"page"},{"location":"testing/","page":"Test your code","title":"Test your code","text":"Create a test directory and place an empty runtests.jl file inside. That is, you should have \\\\path\\to\\MyFirstProject\\test\\runtests.jl.\nIn the REPL, navigate to the project directory and then type ], and then activate .\\test. This tells Julia that \\\\path\\to\\MyFirstProject\\test is the active directory.\nType add Test. This step creates the Project.toml and Manifest.toml files specifically for the test environment. That is, the test suite can have dependencies that the package does not have. In this case we have made the Test package a dependency of the test environment, even though MyFirstProject itself does not require Test to function. The Test package is in Julia's standard library.\nPut the following code in the runtests.jl file and save it.\n ```julia\n using Test\n using MyFirstProject\n\n @testset \"calculate_age_group\" begin\n     @test ismissing(calculate_age_group(-3, 5, 85))\n     @test calculate_age_group(-0.5, 5, 85) == \"unborn\"\n     @test calculate_age_group(0, 5, 85)    == \"0 to 4\"\n     @test calculate_age_group(12, 5, 85)   == \"10 to 14\"\n     @test calculate_age_group(9999, 5, 85) == \"85+\"\n end\n ```\nIn the REPL, type activate ., which sets the project directory as the active directory.\nType test. The test suite should run and give an output something like this:","category":"page"},{"location":"testing/","page":"Test your code","title":"Test your code","text":"     Testing Running tests...\nTest Summary:       | Pass  Total\ncalculate_age_group |    5      5\n     Testing MyFirstProject tests passed ","category":"page"},{"location":"testing/","page":"Test your code","title":"Test your code","text":"Now you can create new test sets and add them to your test suite. Take a look at the Unit Testing section of the Julia manual for further testing functionality that the Test package provides.","category":"page"},{"location":"writing_functions/#Write-some-functions","page":"Write some functions","title":"Write some functions","text":"","category":"section"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"In this example we define our own functionality and work with data that includes dates.","category":"page"},{"location":"writing_functions/#Add-a-package-programatically","page":"Write some functions","title":"Add a package programatically","text":"","category":"section"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"First let's add the Dates package to the project, so that we can use the functinality that it provides. See the Dates package in Julia's standard library for details of the available functionality. Open Julia and type the following:","category":"page"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"cd(\"C:\\\\Users\\\\username\\\\code\\\\MyFirstProject\")  # Navigate to the project directory (alter as required).\nusing Pkg          # Import the Pkg package, which is in Julia's standard library.\nPkg.activate(\".\")  # Set the current directory as the active directory.\nPkg.add(\"Dates\")   # Make the Dates package available to this project.","category":"page"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"Note that this is different way of adding a package to a project. Previously we interactively entered pkg mode and manually added the required packages. Here we have used the Pkg package from the standard library and added the Dates package programmatically.","category":"page"},{"location":"writing_functions/#Create-a-new-script","page":"Write some functions","title":"Create a new script","text":"","category":"section"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"Create a new file in the scripts directory called working_with_dates.jl, and put the following code in it:","category":"page"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"# Get started\nusing Pkg          # Import the Pkg package, which is in Julia's standard library.\nPkg.activate(\".\")  # Set the current directory as the active directory.\nPkg.instantiate()  # Fetch any dependencies that you don't already have (Julia uses Manifest.toml to do this)\n\n# Import required packages\nusing DataFrames  # For manipulating tabular data in memory.\nusing Dates       # A standard library package for manipulating dates.\nusing Statistics  # For computing basic descriptive statistics such as means and variances.\n\n# Create data\nnpeople    = 100  # Number of people in our fake data\ndob_range  = Date(1900, 1, 1):Day(1):Date(1920, 12, 31)  # All dates from 1/1/1900 to 31/12/1920 inclusive\nbirthdates = rand(dob_range, npeople)   # 100 random dates drawn from dob_range\nage_range  = -5:1:95                    # All ages (in whole years) from -5 to 95 years\nages       = rand(age_range, npeople)   # 100 random ages drawn from age_range\neventdates = birthdates .+ Year.(ages)  # For each person, the date of some event occurs at the age given by the ages column\ndata       = DataFrame(birthdate=birthdates, eventdate=event_dates)  # Collect columns into a DataFrame\n\n# Calculate each person's age in years\ndata[!, \"age_in_years\"] = calculate_age_in_years.(data.birthdate, data.eventdate)","category":"page"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"Note the use of the . operator in the definition of eventdates in the 3rd last line. When a . is included with a function call, it tells Julia to apply the function to all elements of a vector. This is known as broadcasting. In this line the . appears twice. First, the Year function is applied to each age in the ages column. For a person who is 10 years old for example, this defines a period of 10 years. Then the periods are added to the birthdates. For each person, the resulting event date is x years after the birth date, where x is the person's age in years.","category":"page"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"The last line has a few interesting features:","category":"page"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"A new column of the data is defined, and is called age_in_years.\nOn the right side of the equation columns are also referenced with the tablename.colname notation.\nThe broadcast operator (.) is used to apply the function calculate_age_in_years to each row of the columns birthdate and eventdate.","category":"page"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"Open Julia and run these lines one by one. Note that the last line fails, and returns an UndefVarError, which indicates that the function calculate_age_in_years is not defined. Indeed, this function does not exist in any of the packages imported at the start of the script. We have to write it ourselves.","category":"page"},{"location":"writing_functions/#Your-first-function","page":"Write some functions","title":"Your first function","text":"","category":"section"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"We aim for our project structure to have functions contained in the src directory, and code that uses these functions contained in the scripts directory.","category":"page"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"To define the calculate_age_in_years function, open the MyFirstProject.jl in the src directory, and replace the contents with this:","category":"page"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"module MyFirstProject  # Module name is also the project name\n\nexport calculate_age_in_years  # Make this function available outside the project without specifying the module name\n\nusing Dates  # Import the Dates package into the MyFirstProject \n\n\"Calculates the time elapsed between startdate and enddate, rounded to the nearest whole number of years.\"\nfunction calculate_age_in_years(startdate, enddate)\n    d     = enddate - startdate\n    ndays = d.value\n    round(Int, ndays / 365.25)\nend\n\nend  # End of module (and project) definition","category":"page"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"In the script, insert the line using MyFirstProject anywhere before the line containing calculate_age_in_years. it is good practice to import MyFirstProject at the same time as importing the other dependencies. Try placing using MyFirstProject before using Statistics, so that the packages are imported in alphabetical order.","category":"page"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"Now the script should run from top to bottom without any problems.","category":"page"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"The MyFirstProject.jl file has a few features:","category":"page"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"All code is contained within a module with the same name as the project name.\nThe export line specifies the functionality that is available to external programs without specifying the module name, including scripts like the one we are writing. Without this line we would have to include the module name whenever we use the calculate_age_in_years function. That is, we would have to type MyFirstProject.calculate_age_in_years instead of just calculate_age_in_years in our script. Sometimes this is desirable because then it is clear where the function is defined. Other times it's a pain to type and visually cluttering. Use your discretion here.\nThe function definition has a docstring immediately above it. This provides information about the function to help users. In Julia, type using MyFirstProject if you haven't already, then type ?calculate_age_in_years. Notice that the docstring that you wrote appears in the REPL.\nThe function arguments, startdate and enddate could be anything...dates, integers, strings and so on. In our case, we are only using dates as inputs. If you require that the only allowed inputs are dates, replace the first line of the function definition with function calculate_age_in_years(startdate::Date, enddate::Date).","category":"page"},{"location":"writing_functions/#Types,-methods-and-multiple-dispatch","page":"Write some functions","title":"Types, methods and multiple dispatch","text":"","category":"section"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"Add the following function to src/myFirstProject.jl, and replace export calculate_age_in_years with export calculate_age_in_years, calculate_age_group:","category":"page"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"\"\"\"\nCalculate the age group of a person with known age.\nIf the age is less than negative 9 months (prior to conception), return missing.\n\"\"\"\nfunction calculate_age_group(age::Real, width, largest_lowerbound)\n    if age < -0.75    # Age prior to conception is impossible. Set age group to missing.\n         missing\n    elseif age < 0.0  # Person exists but is not yet born\n         \"unborn\"\n    else              # Person is born\n         lowerbound = Int(width * div(age, width))\n         lowerbound >= largest_lowerbound && return \"$(largest_lowerbound)+\"  # Insert largest_lowerbound into the result string\n         upperbound = Int(lowerbound + width - 1)\n         \"$(lowerbound) to $(upperbound)\"\n    end\nend\n\ncalculate_age_group(age::Missing, width, largest_lowerbound) = missing","category":"page"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"Note these features:","category":"page"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"The docstring for the calculate_age_group function has more than 1 line. This is achieved by encapsulating the content with triple quotes.\nWhere the function returns a string, the string is constructed from variables using string interpolation. For example, Today's date is $(today()) will return a string containing the value of today(). Use the $(put your code here) notation to achieve this.\nThe calculate_age_group function appears to be defined twice. In fact it is defined differently for different types of inputs. Notice that if the input age is a missing value (with type Missing), the result is also missing. If the input age is a real number, then the result depends on its value. Note the distinction between a variable's type and its value.\nJulia creates compiled code for each definition of the function, where each definition is known as a method of the function. When Julia encounters the function call, it identifies the types of its arguments and calls the corresponding method, which runs at native speed, which is fast. This is known as multiple dispatch, because the selected method depends on the types of all the function's arguments. Some older languages have single dispatch, and others, such as Python and R, have no dispatch and run the same code regardless of the input. No dispatch results in slower performance or errors.\nThe type Real includes integers and floating point numbers as subtypes. To see all direct subtypes of a type, use the subtypes function. For example, subtypes(Real) lists 4 subtypes. Then explore the subtypes of the subtypes, such as subtypes(Integer), and so on.\nSimilarly, the supertype function specifies the type that contains its argument as a subtype. E.g., supertype(Real).","category":"page"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"Now append the following code to the working_with_dates.jl script:","category":"page"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"sum(abs.(data.age_in_years .- ages)) == 0  # True if the calculated ages are the same as the input ages\nquantile(data.age_in_years, [0.05, 0.25, 0.5, 0.75, 0.95])\n\n# Calculate each person's age group\ndata.agegroups = calculate_age_group.(data.age_in_years, 5, 85)\n\ncalculate_age_group(-3, 5, 85)\ncalculate_age_group(-0.5, 5, 85)\ncalculate_age_group(0, 5, 85)\ncalculate_age_group(12, 5, 85)\ncalculate_age_group(9999, 5, 85)","category":"page"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"Run the script and observe the results.","category":"page"},{"location":"writing_functions/#Missing-data","page":"Write some functions","title":"Missing data","text":"","category":"section"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"Julia has a Missing data type that has a single value, namely missing. This contrasts to Int64 (64-bit integers) for example, which have many values such as 1, 2, 3, etc. Missing values are represented using missing, and most built-in functions that involve numbers have a method for handling missing. For example, 1 + missing is missing.","category":"page"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"In a DataFrame the data is contained in columns, with each column having an element type. For example, the birthdate column in the previous example has element type Date, The column itself has type Vector{Date}, which means that the column is a vector of dates. Type eltype(data.birthdate) into Julia for the former, and typeof(data.birthdate) for the latter.","category":"page"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"If a cell can have a missing value, then the element type needs to be changed to allow for this. The standard way to achieve this in Julia is to use union types, which allows a value to have any 1 type of a pre-specified set of types. For example, if we encounter data with a missing birth date, then the element type of the birthdate column would have to change from Date to Union{Date, Missing}. Values in the column can now be either a date or missing. Moreover, a value can be changed from a date to missing and vice versa.","category":"page"},{"location":"writing_functions/","page":"Write some functions","title":"Write some functions","text":"In this case eltype(data.birthdate) would be Union{Date, Missing}, since we are referring to the types of all potential elements in the column. Yet the type of the first element of the column, typeof(data.birthdate)[1], would be either Date or Missing (the data type of missing), since here we are looking at a realised value.","category":"page"},{"location":"#Getting-Started","page":"Getting started","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"Get started with Julia without any previous experience.","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"Although some instructions are specific to Windows users, they are easily adapted to other operating systems. The examples focus on data manipulation.","category":"page"},{"location":"#Install-Julia","page":"Getting started","title":"Install Julia","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"You can install Julia without admin rights. Download the Windows 64-bit installer from here. When installing, check the box for adding Julia to the PATH variable. This means you can type julia into PowerShell and it will start. That is, you needn't hunt for the Julia executable on your machine.","category":"page"},{"location":"#Install-Visual-Studio-Code-(optional)","page":"Getting started","title":"Install Visual Studio Code (optional)","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"Although Julia code can be edited in Notepad and run from the REPL, we have found it useful to work entirely from Microsoft's Visual Studio Code, which is available on Windows, Mac and Linux, and is often referred to as VS Code.","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"Moreover, the Julia extension for VS Code provides Julia-specific functionality such as syntax highlighting, which makes Julia code more visually appealing and easier to read. To install VS Code and its Julia extension, follow the instructions here.","category":"page"},{"location":"#Troubleshooting","page":"Getting started","title":"Troubleshooting","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"Try these sources if you get stuck:","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"Help within Julia. Type the question mark then the function you are looking for. For example: ?maximum\nThe Julia manual.\nJulia’s Discourse page, which is a source of news, knowledge and help. Search to see if your question has been asked before, or post your own.\nA coder’s most trusty troubleshooting method, Google, and StackOverflow in particular.","category":"page"},{"location":"further_learning/#Further-learning","page":"Further learning","title":"Further learning","text":"","category":"section"},{"location":"further_learning/","page":"Further learning","title":"Further learning","text":"To get a further taste of Julia's syntax, spend 10 minutes here. This intro is for version 1.0.0. Although released in 2018, it is still valid code. More features have been added since, but the core features are here.\nGet started with data manipulation by trying some of the exercises from the DataFrames.jl documentation.\nSearch Julia's package ecosystem at JuliaHub.\nIf you need to pull data from a database, check out the ODBC package. There are also packages that are tailored to specific databases.\nTo document a project, use the Documenter package.","category":"page"},{"location":"projects/#Create-a-project","page":"Create a project","title":"Create a project","text":"","category":"section"},{"location":"projects/#What-is-a-project?","page":"Create a project","title":"What is a project?","text":"","category":"section"},{"location":"projects/","page":"Create a project","title":"Create a project","text":"In Julia, a project is a set of files that contain some combination of functions, scripts, tests and documentation. A project needn't have all of these things. Julia expects that the files exist on the file system in the following directories:","category":"page"},{"location":"projects/","page":"Create a project","title":"Create a project","text":"The src directory contains functions.\nThe scripts directory contains scripts (ok this isn't standard but is reasonable practice).\nThe test directory contains tests that check whether code is behaving as required.\nThe docs directory contains project documentation.","category":"page"},{"location":"projects/#What-is-a-package?","page":"Create a project","title":"What is a package?","text":"","category":"section"},{"location":"projects/","page":"Create a project","title":"Create a project","text":"A package is a type of project that provides reusable functionality for other projects. Loosely speaking, a package can be thought of as a library of functions.","category":"page"},{"location":"projects/","page":"Create a project","title":"Create a project","text":"Some packages are built in, such as the Dates package that provides functions such as computing the number of days between 2 dates. The set of built-in packages is called the standard library, or stdlib for short.","category":"page"},{"location":"projects/","page":"Create a project","title":"Create a project","text":"There are thousands of packages available outside the standard library, created by users around the world. You can search these via Google or JuliaHub.","category":"page"},{"location":"projects/#Start-a-new-project","page":"Create a project","title":"Start a new project","text":"","category":"section"},{"location":"projects/","page":"Create a project","title":"Create a project","text":"To start your own project, first create a folder where you'll keep your code. For example, C:\\\\Users\\username\\code. Open the Julia REPL (the command line interface...Read-Evaluate-Print-Loop) and enter the following:","category":"page"},{"location":"projects/","page":"Create a project","title":"Create a project","text":"cd(\"C:\\\\Users\\\\username\\\\code\")  # Navigate to where you keep your code\nusing Pkg                        # Make Julia’s package management functions available\nPkg.generate(\"MyFirstProject\")   # Generate a new package","category":"page"},{"location":"projects/","page":"Create a project","title":"Create a project","text":"In your file explorer, look at the files now present at C:\\\\Users\\username\\code\\MyFirstProject. You will see some newly created files with the following structure, which is the minimum requirement for a Julia project:","category":"page"},{"location":"projects/","page":"Create a project","title":"Create a project","text":"Project.toml\nsrc\\MyFirstProject.jl","category":"page"},{"location":"projects/","page":"Create a project","title":"Create a project","text":"Open the Project.toml in any editor and note that this file contains information about the project. You needn't edit this file - more  information will be automatically added as you develop the project. Close Project.toml.","category":"page"}]
}
